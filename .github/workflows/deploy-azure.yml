name: Deploy to Azure VM (Backup)

on:
  workflow_dispatch:
    inputs:
      target:
        description: 'Deployment target'
        required: true
        default: 'azure'
        type: choice
        options:
          - azure
          - hostinger

jobs:
  deploy-azure:
    name: Deploy to Azure VM
    runs-on: ubuntu-latest
    if: github.event.inputs.target == 'azure'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy to Azure VM
        uses: appleboy/ssh-action@master
        with:
          host: 48.217.66.79
          username: troyboy911
          password: ${{ secrets.AZURE_VM_PASSWORD }}
          port: 22
          script: |
            # Set deployment path
            DEPLOY_PATH="/home/troyboy911/pet-automation"
            
            # Create deployment directory
            mkdir -p $DEPLOY_PATH
            cd $DEPLOY_PATH
            
            # Backup current deployment
            if [ -d "pet-automation-suite" ]; then
              echo "📦 Creating backup..."
              tar -czf backup-$(date +%Y%m%d-%H%M%S).tar.gz pet-automation-suite 2>/dev/null || true
              ls -t backup-*.tar.gz 2>/dev/null | tail -n +6 | xargs -r rm || true
            fi
            
            # Clone or pull latest code
            if [ -d "pet-automation-suite/.git" ]; then
              echo "🔄 Pulling latest changes..."
              cd pet-automation-suite
              git pull origin main
            else
              echo "📥 Cloning repository..."
              git clone https://github.com/Troyboy911/petworkspace.git pet-automation-suite
              cd pet-automation-suite
            fi
            
            # Create .env if it doesn't exist
            if [ ! -f .env ]; then
              echo "📝 Creating .env file..."
              cp .env.example .env
            fi
            
            # Install Docker if not present
            if ! command -v docker &> /dev/null; then
              echo "🐳 Installing Docker..."
              curl -fsSL https://get.docker.com -o get-docker.sh
              sudo sh get-docker.sh
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker troyboy911
            fi
            
            # Install Docker Compose if not present
            if ! command -v docker-compose &> /dev/null; then
              echo "🐳 Installing Docker Compose..."
              sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi
            
            # Stop existing containers
            echo "🛑 Stopping existing containers..."
            docker-compose down 2>/dev/null || true
            
            # Pull latest images
            echo "📦 Pulling latest Docker images..."
            docker-compose pull 2>/dev/null || true
            
            # Start services
            echo "🚀 Starting services..."
            docker-compose up -d --build
            
            # Wait for services
            echo "⏳ Waiting for services to start..."
            sleep 30
            
            # Health check
            echo "🏥 Running health check..."
            for i in {1..10}; do
              if curl -f http://localhost:5000/health 2>/dev/null; then
                echo "✅ Health check passed!"
                break
              fi
              echo "Waiting for app... (attempt $i/10)"
              sleep 5
            done
            
            # Show status
            echo "📊 Container status:"
            docker-compose ps
            
            # Clean up
            echo "🧹 Cleaning up..."
            docker image prune -af --filter "until=24h" 2>/dev/null || true
            
            echo "✅ Deployment completed!"
            echo "🌐 Dashboard: http://48.217.66.79:5000"
      
      - name: Verify Deployment
        run: |
          echo "🔍 Verifying deployment..."
          sleep 10
          for i in {1..5}; do
            if curl -f http://48.217.66.79:5000/health 2>/dev/null; then
              echo "✅ Deployment verified!"
              exit 0
            fi
            echo "Waiting... (attempt $i/5)"
            sleep 10
          done
          echo "⚠️ Could not verify, but may still be starting"
      
      - name: Deployment Summary
        if: always()
        run: |
          echo "================================"
          echo "📊 Azure VM Deployment Summary"
          echo "================================"
          echo "Status: ${{ job.status }}"
          echo "Dashboard: http://48.217.66.79:5000"
          echo "Health: http://48.217.66.79:5000/health"
          echo "================================"

  deploy-hostinger:
    name: Deploy to Hostinger VPS
    runs-on: ubuntu-latest
    if: github.event.inputs.target == 'hostinger'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy to Hostinger VPS
        uses: appleboy/ssh-action@master
        with:
          host: 89.116.159.31
          username: root
          key: ${{ secrets.VPS_SSH_KEY }}
          port: 22
          script: |
            # Same deployment script as main workflow
            DEPLOY_PATH="/var/www/pet-automation"
            mkdir -p $DEPLOY_PATH
            cd $DEPLOY_PATH
            
            if [ -d "pet-automation-suite" ]; then
              echo "📦 Creating backup..."
              tar -czf backup-$(date +%Y%m%d-%H%M%S).tar.gz pet-automation-suite 2>/dev/null || true
            fi
            
            if [ -d "pet-automation-suite/.git" ]; then
              cd pet-automation-suite
              git pull origin main
            else
              git clone https://github.com/Troyboy911/petworkspace.git pet-automation-suite
              cd pet-automation-suite
            fi
            
            [ ! -f .env ] && cp .env.example .env
            
            docker-compose down 2>/dev/null || true
            docker-compose up -d --build
            
            sleep 30
            curl -f http://localhost:5000/health || echo "Health check pending..."
            
            echo "✅ Deployment completed!"
      
      - name: Deployment Summary
        if: always()
        run: |
          echo "================================"
          echo "📊 Hostinger Deployment Summary"
          echo "================================"
          echo "Status: ${{ job.status }}"
          echo "Dashboard: http://89.116.159.31:5000"
          echo "================================"