name: Deploy to Coolify

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy to Coolify
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy to Coolify Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.COOLIFY_HOST }}
          username: root
          key: ${{ secrets.COOLIFY_SSH_KEY }}
          port: 22
          script: |
            # Set deployment path
            DEPLOY_PATH="/var/www/pet-automation"
            APP_NAME="calm-crane-t8o0gosgwc8ok8s4sc8ok040"
            
            echo "üöÄ Starting Coolify deployment for $APP_NAME"
            
            # Create deployment directory
            mkdir -p $DEPLOY_PATH
            cd $DEPLOY_PATH
            
            # Backup current deployment
            if [ -d "pet-automation-suite" ]; then
              echo "üì¶ Creating backup..."
              tar -czf backup-$(date +%Y%m%d-%H%M%S).tar.gz pet-automation-suite 2>/dev/null || true
              ls -t backup-*.tar.gz 2>/dev/null | tail -n +6 | xargs -r rm || true
            fi
            
            # Clone or pull latest code
            if [ -d "pet-automation-suite/.git" ]; then
              echo "üîÑ Pulling latest changes..."
              cd pet-automation-suite
              git pull origin main
            else
              echo "üì• Cloning repository..."
              git clone https://github.com/Troyboy911/petworkspace.git pet-automation-suite
              cd pet-automation-suite
            fi
            
            # Create .env if it doesn't exist
            if [ ! -f .env ]; then
              echo "üìù Creating .env file..."
              cp .env.example .env
            fi
            
            # Check if Docker is installed
            if ! command -v docker &> /dev/null; then
              echo "üê≥ Docker not found. Installing..."
              curl -fsSL https://get.docker.com -o get-docker.sh
              sh get-docker.sh
              systemctl start docker
              systemctl enable docker
            fi
            
            # Check if Docker Compose is installed
            if ! command -v docker-compose &> /dev/null; then
              echo "üê≥ Installing Docker Compose..."
              curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              chmod +x /usr/local/bin/docker-compose
            fi
            
            # Stop existing containers
            echo "üõë Stopping existing containers..."
            docker-compose down 2>/dev/null || true
            
            # Pull latest images
            echo "üì¶ Pulling latest Docker images..."
            docker-compose pull 2>/dev/null || true
            
            # Start services
            echo "üöÄ Starting services..."
            docker-compose up -d --build
            
            # Wait for services to be healthy
            echo "‚è≥ Waiting for services to start..."
            sleep 30
            
            # Health check
            echo "üè• Running health check..."
            for i in {1..10}; do
              if curl -f http://localhost:5000/health 2>/dev/null; then
                echo "‚úÖ Health check passed!"
                break
              fi
              echo "Waiting for app to be ready... (attempt $i/10)"
              sleep 5
            done
            
            # Show running containers
            echo "üìä Running containers:"
            docker-compose ps
            
            # Clean up old images
            echo "üßπ Cleaning up old Docker images..."
            docker image prune -af --filter "until=24h" 2>/dev/null || true
            
            echo "‚úÖ Deployment completed successfully!"
            echo "üåê Application: $APP_NAME"
      
      - name: Verify Deployment
        run: |
          echo "üîç Verifying deployment..."
          sleep 10
          # Note: Update with your actual Coolify domain/IP
          echo "‚ö†Ô∏è Please verify manually at your Coolify dashboard"
          echo "App Name: calm-crane-t8o0gosgwc8ok8s4sc8ok040"
      
      - name: Deployment Summary
        if: always()
        run: |
          echo "================================"
          echo "üìä Coolify Deployment Summary"
          echo "================================"
          echo "Status: ${{ job.status }}"
          echo "App: calm-crane-t8o0gosgwc8ok8s4sc8ok040"
          echo "Logs: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo "================================"